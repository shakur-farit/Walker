//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherUpgradeValue;

    public static Entitas.IMatcher<GameEntity> UpgradeValue {
        get {
            if (_matcherUpgradeValue == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.UpgradeValue);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherUpgradeValue = matcher;
            }

            return _matcherUpgradeValue;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Hero.UpgradeValue upgradeValue { get { return (Code.Gameplay.Features.Hero.UpgradeValue)GetComponent(GameComponentsLookup.UpgradeValue); } }
    public float UpgradeValue { get { return upgradeValue.Value; } }
    public bool hasUpgradeValue { get { return HasComponent(GameComponentsLookup.UpgradeValue); } }

    public GameEntity AddUpgradeValue(float newValue) {
        var index = GameComponentsLookup.UpgradeValue;
        var component = (Code.Gameplay.Features.Hero.UpgradeValue)CreateComponent(index, typeof(Code.Gameplay.Features.Hero.UpgradeValue));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceUpgradeValue(float newValue) {
        var index = GameComponentsLookup.UpgradeValue;
        var component = (Code.Gameplay.Features.Hero.UpgradeValue)CreateComponent(index, typeof(Code.Gameplay.Features.Hero.UpgradeValue));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveUpgradeValue() {
        RemoveComponent(GameComponentsLookup.UpgradeValue);
        return this;
    }
}
